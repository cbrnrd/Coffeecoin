package io.codepace.coffeecoin;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import static io.codepace.coffeecoin.Util.logInfoAndPrint;


/**
 * This class manages all things associated with the node address. That includes
 * all private keys, and keep track of the offset for default addresses.
 */
public class AddressManager {

    private ArrayList<String> addrs;
    private ArrayList<String> privateKeys;
    private MerkleTreeGenLimitless treeGen;
    private int defaultOffset = 1;
    private Logger logger = Util.getLogger();

    public AddressManager(){
        this.treegen = new MerkleTreeGenLimitless();
        this.privateKeys = new ArrayList<>();
        this.addrs = new ArrayList<>();
        try{
            File wallet = new File("wallet-keys.dat");
            if(!wallet.exists()){
                logInfoAndPrint("Generating new address...");
                String key = getPrivateKey();
                String address = treeGen.generateMerkleTree(key, 14, 16, 128);
                System.out.println("New address: " + Util.ANSI_GREEN + address + Util.ANSI_RESET);
                logger.log(Level.INFO, "New address generated: " + address);

                // Write the addr and key out to the walletfile
                PrintWriter out = new PrintWriter(wallet);
                out.println(address + ":" + key);
                out.close();

                // Append the address to the address list
                addrs.add(address);

                privateKeys.add(key);
            } else {
                Scanner sc = new Scanner(wallet);
                while (sc.hasNextLine()){
                    String in = sc.nextLine();
                    String addr = in.substring(0, in.indexOf(":"));
                    String privateKey = in.substring(in.indexOf(":") + 1);
                    addrs.add(addr);
                    privateKeys.add(privateKey);
                }
                sc.close();
            }
            File addressFolder = new File("addresses");
            if (addressFolder.exists()){
                Scanner sc = new Scanner(wallet);
                while (sc.hasNextLine()){
                    String[] combo = sc.nextLine().split(":");
                    treeGen.generateMerkleTree(combo[1], 14, 16, 128);
                }
                sc.close();
            } else{
                logger.log(Level.INFO, "No need to regenerate address file");
            }
        } catch (IOException e){
            e.printStackTrace();
        }
    }

    /**
     * Return the offset of the address index. This is used when signing transaction with the default address.
     * If this were kept track of by the database manager, then block generation would be tricky.
     * defaultOffset is always > 1.
     * @return int The offset for the default address
     */
    public int getDefaultOffset(){
        return defaultOffset;
    }

    /**
     * Increments defaultOffset in order to account for a sig being used.
     */
    public void incrementDefaultOffset(){
        defaultOffset++;
    }

    /**
     * This method resets the defaultOffset to 1 (its original state). This is useful when the blockchain has caught up
     * with the transactions we've sent.
     */
    public void resetDefaultOffset(){
        defaultOffset = 1;
    }

    /**
     * Returns the private key of the wallets default address.
     * @return String The private key of the daemon's default address.
     */
    public String getDefaultPrivateKey(){
        return privateKeys.get(0);
    }

    public String getSignedTransaction(String dest, double amount, int index){
        String data = getDefaultAddress() + "::" + amount + "::" + dest + "::" + amount;
        String sig = new MerkleAddressUtility().getMerkleSignature(data, getDefaultPrivateKey(), index, getDefaultAddress());
        String fullTx = data + "::" + sig + "::" + index;
        return fullTx;
    }


    /**
     * Returns the default address (the first one from the address file, or the one that was originally generated by the daemon's first run)
     * @return String The default address
     */
    public String getDefaultAddress(){
        return addrs.get(0);
    }

    /**
     * Returns a new address
     * @return String A new address
     */
    public String getNewAddress()
    {
        String privateKey = getPrivateKey();
        String address = treeGen.generateMerkleTree(privateKey, 14, 16, 128);
        addrs.add(address);
        privateKeys.add(privateKey);
        return address;
    }

    /**
     * This generates and returns a secure private key
     * @return String A secure private key
     */
    public String getPrivateKey(){
        return new RandomString().nextString();
    }

}
